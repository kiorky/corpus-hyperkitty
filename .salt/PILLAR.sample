#
# This file contains default values which are used
# by the salt states deploying your project.
# you may copy them to your relevant PILLAR file
# before editing them.
# If you need to add variables, this is where to begin.
# Please keep defaults in there, but real passwords
# must be putted inside pillar
#
# replace project_name in your pillar by
# the current projectname
# you can also merge parts of this file
# with the relevant pillar

{#
   ALSO: copy & edit this to your pillar file to configure postfix
#}
{#
{% set mail ='makina-states.services.mail.postfix' %}
{{mail}}.inet_interfaces: [all]
{{mail}}.mydestination:
    "lists.foo.com": "OK"
    "lists.foo.net": "OK"
{{mail}}.transport_maps_param: >
     hash:/srv/projects/mailman/project/bundler/var/data/postfix_lmtp,
     hash:/etc/postfix/transport,
     hash:/etc/postfix/transport.local
{{mail}}.local_recipient_maps_param: |
     hash:/srv/projects/mailman/project/bundler/var/data/postfix_lmtp
{{mail}}.relay_domains_param: >
     hash:/srv/projects/mailman/project/bundler/var/data/postfix_domains,
     hash:/etc/postfix/relay_domains,
     hash:/etc/postfix/relay_domains.local
{{mail}}.owner_request_special: 'no'

#}


{# also think to restrict the smtp traffic via iptables,
   in makina-states, via ms_iptables, or via the provider loadbalancer,
   redirect only the wanted smtp traffic #}

makina-projects.projectname:
  data:
    default_language: fr
    site_owner: "root@{fqdn}"
    var_dir: "{data_root}/var"
    spool: "{var_dir}/spool"
    PROJECT: mailman_web
    fixperms_cron_periodicity: "0 */2 * * *"
    app_root: "{project_root}/bundler"
    locale_cwd: "{app_root}"
    app_url: "https://gitlab.com/mailman/mailman-bundler.git"
    app_url_rev: "master"
    app_url_type: git
    #app_url_tar_opts: "xzvf"
    #app_url_archive_format: tar
    app_download_root: "{app_root}"
    #app_url_hash: "md5=123"
    #app_archive_test_exists: 'test ! -e {data_root}/www/index.php'
    js_dir: "{app_root}/front_end"
    gulp_targets: ["clean-build"]
    do_bower: false
    do_gulp: false
    configs:
      {% for i in ['settings_local.py',] %}
      "{{i}}":
        source: "salt://makina-projects/{name}/files/config.py"
        target: "{app_root}/{PROJECT}/{{i}}"
        mode: 640
      {%endfor%}
      buildout-salt.cfg:
        source: "salt://makina-projects/{name}/files/buildout.cfg"
        target: "{app_root}/buildout-salt.cfg"
        mode: 640
    htaccess: "/etc/{name}.webaccess"
    doc_root: "{static}"
    #orig_py: /usr/bin/python3
    py: "{py_root}/bin/python"
    py_root: "{project_root}/venv"
    media_source: "{project_root}/media"
    domain: "{fqdn}"
    requirements: "{project_root}/requirements/prod.txt"
    server_aliases: []
    #force_ssl: false
    #disabled_urls []
    #ldap_url: "ldap://ldap.net/dc=m,dc=com?uid?sub?(objectClass=person)"
    #ldap_binddn: "uid=f,dc=e,dc=e"
    #ldap_binddn_passwd: "foo"
    postfix: true
    #admin_url: /admin
    #admin_allowed_ips :[]
    DJANGO_SETTINGS_MODULE: "mailman_web.production"
    WSGI: "{PROJECT}.wsgi:application"
    nginx_loglevel: "crit"
    nginx_upstreams: salt://makina-projects/{name}/files/nginx.upstreams.conf
    nginx_vhost: salt://makina-projects/{name}/files/nginx.content.conf
    adminmail: "root@{domain}"
    #ftp_root: "{data_root}/ftp"
    #ftp_ip: "x.x.x.x"
    #ftp_domain: "doo"
    #ftp_port_range: "22300 22400"
    #ftp_users:
    #  - eib: {password: "{ftp_password}",
    #          home: "{ftp_root}",
    #          user: eib-user, shell: /bin/bash, mode: "0771"}
    #  - ftpuser: {'password': 'xxx', "home": "{data_root}/foo"}
    create_admins: true
    admins:
      {% for i in ['sysadmin'] %}
      - {{i}}:
          mail: "{{i}}+{name}@{fqdn}"
          password: {{salt['mc_utils.generate_stored_password'](
                             'corpus-django_web_admin'+i)}}
      {%endfor %}
    static: "{data_root}/static"
    media: "{data_root}/media"
    host: localhost
    port: 8000
    workers: 10
    worker_class: sync
    worker_timeout: 9000
    compile_messages: true
    collect_static: true
    do_syncdb: false
    do_migrate: true
    do_syncdb_only_first_time: false
    # http_users:
    #   - root: foo
    # extra django settings to add
    # to the file
    USE_SSL: True
    buildout:
      settings:
        sources:
          hyperkitty: 'git https://gitlab.com/mailman/hyperkitty.git rev=74db8cda1891554cdf4dd623b9815f4584be750f'
          mailmanclient: 'git https://gitlab.com/mailman/mailmanclient.git rev=1b25268ba10c921db3668d5d34177b64a0da03ed'
          postorius: 'git https://gitlab.com/mailman/postorius.git rev=1c1a759f79f9fe94914d5622289c727dc6ea54ff'
          django-mailman3: 'git https://gitlab.com/mailman/django-mailman3.git rev=feb256e430c47830affbd31bfb1fc130f67e451e'
        buildout:
          git--mailman: '-e git+https://gitlab.com/mailman/mailman.git@c23519b5262fd264ed0f9e5bc23b901ed7eee632#egg=mailman'
          git--mailman-hyperkitty: '-e git+https://gitlab.com/mailman/mailman-hyperkitty.git@cb2df4dade95c210496a5e1c52b9401914a03c4a#egg=mailman-hyperkitty'
          extends: buildout.cfg
          parts: main mailman templates gunicorn
          extensions: 'mr.developer'
          auto-checkout: |
                         mailmanclient
                           postorius
                           django-mailman3
                           hyperkitty
        configuration:
          deployment: production
        mailman:
          python3-version: 3.4
          on_install: true
          cmds: |
              if test ! -e ${mailman:venv-dir};then virtualenv -p python${mailman:python3-version} ${mailman:venv-dir};fi
                  ${mailman:venv-dir}/bin/pip install ${buildout:git--mailman}
                  ${mailman:venv-dir}/bin/pip install ${buildout:git--mailman-hyperkitty}
        mailman-web:
          'eggs+': |
                   django-auth-ldap
                       ipython
    django_settings:
      #
      ADMINS: "placeholder (totally computed)"
      VAR_DIR: "{spool}"
      SITE_ID: 1
      USE_SSL: True
      DATABASES:
        default:
          # SQLITE
          # ENGINE: 'django.db.backends.sqlite3'
          # NAME: "{data_root}/{PROJECT}.sqlite"
          # GEODJANGO BACKEND !
          #    ENGINE: 'django.contrib.gis.db.backends.postgis'
          # Classical pg backend
          ENGINE: 'django.db.backends.postgresql_psycopg2'
          USER: '{name}'
          PORT: 5432
          HOST: '127.0.0.1'
          NAME: 'db'
          PASSWORD: '{name}secret'
          #ENGINE: 'django.db.backends.mysql'
          #USER: '{name}'
          #PORT: 3306
          #HOST: '127.0.0.1'
          #NAME: 'db'
          #PASSWORD: '{name}secret'
          #OPTIONS:
          #  init_command: 'SET storage_engine=INNODB'
      DEFAULT_FROM_EMAIL: '{adminmail}'
      SERVER_EMAIL: 'root@{fqdn}'
      MEDIA_ROOT: '{media}'
      STATIC_ROOT: '{static}'
      LANGUAGE_CODE: fr-fr
      DATE_FORMAT: 'iso-8601'
      ALLOWED_HOSTS:
        - localhost
        - 127.0.0.1
        - "{domain}"
        - "{fqdn}"
        - "10.5.0.1"
      CORS_ORIGIN_ALLOW_ALL: True
      # Internationalization
      # https://docs.djangoproject.com/en/1.6/topics/i18n/
      TIME_ZONE: 'Europe/Paris'
      DEBUG: False
      TEMPLATE_DEBUG: False
      USE_X_FORWARDED_HOST: True
      #CACHES:
      #  default:
      #    BACKEND: 'django.core.cache.backends.memcached.MemcachedCache'
      #    LOCATION: '127.0.0.1:11211'
      USER_MODULE: django.contrib.auth.models
      USER_CLASS: User
      SECRET_KEY: "{{salt['mc_utils.generate_stored_password'](
                             'corpus-django_web_secret_key', 64)}}"
      MAILMAN_REST_API_USER: 'restadmin'
      MAILMAN_REST_API_PASS: '{{salt['mc_utils.generate_stored_password'](
                             'corpus-django_web_secret_keyAPI', 64)}}'
      MAILMAN_ARCHIVER_KEY: '{{salt['mc_utils.generate_stored_password'](
                             'corpus-django_web_secret_keyARCHIVER', 64)}}'
      LOGGING:
        version: 1
        disable_existing_loggers: False
        filters:
          require_debug_false:
            '()': django.utils.log.RequireDebugFalse
        handlers:
          mail_admins:
            level: 'ERROR'
            class: django.utils.log.AdminEmailHandler
          console:
            level: 'DEBUG'
            class: 'logging.StreamHandler'
          vconsole:
              level: 'INFO'
              class: 'logging.StreamHandler'
        loggers:
          '':
            handlers: ['console']
            level: 'DEBUG'
            propagate: False
          django.request:
             handlers: ['console', 'mail_admins']
             level: 'ERROR'
             propagate: True
          hyperkitty:
            handlers: ['console']
            level: 'INFO'
            propagate: True
          django:
             handlers: ['console', 'mail_admins']
             level: 'ERROR'
             propagate: True
      LANGUAGES:
       - "('fr', _('French'))"
       - "('en', _('English'))"
       - "('it', _('Italia'))"
      #ADDITIONAL_TEMPLATE_DIRS:
      #  - '{project_root}/calanques'
      # add custom extra_settings which will be processed at end only
      #extra_django_settings:
      #  FOO: bar
      #  BAR: true
    # settings rendered as is (not via the macro
    extra_settings:
      #AUTH_LDAP_SERVER_URI: "'ldaps://ldap.foo.net'"
      #AUTH_LDAP_USER_DN_TEMPLATE: "'cn=%(user)s,ou=Users,dc=foo,dc=net'"
      AUTHENTICATION_BACKENDS: |
        (
        #'social.backends.open_id.OpenIdAuth',
        # http://python-social-auth.readthedocs.org/en/latest/backends/google.html
        #'social.backends.google.GoogleOpenId',
        #'social.backends.google.GoogleOAuth2',
        #'social.backends.twitter.TwitterOAuth',
        #'social.backends.yahoo.YahooOpenId',
        #'django_browserid.auth.BrowserIDBackend',
        # for LDAP
        #  'django_auth_ldap.backend.LDAPBackend',
        #
        'django.contrib.auth.backends.ModelBackend',
        )
      AUTH_LDAP_USER_ATTR_MAP: "{'first_name': 'name', 'email': 'mail'}"
      USE_INTERNAL_AUTH: 'True'
      AUTH_LDAP_START_TLS: 'True'
  env_defaults:
    dev:
      django_settings:
        DEBUG: True
# vim:set ft=sls:
